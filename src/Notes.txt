let name: any                Standard i JS
let name: unknown 

let name: string 
let age: number 
let isEnabled: boolean
let placement: number|string    //Union
let skills: string[] = []
let roles: [number, string]     //Tuple

type vs. interface


I JavaScript är type och interface samma sak. 

Interface kommer ifrån den objektorienterade programmeringsbiten där vi har olika ben;
encapsulation, inheritance, polimophism, abstraction.
Dessa är de fyra grundpelarna i objektorienterad programmering (OOP).

React JavaScript implementerar OOP halv som halvt precis som all JavaScript

Type = alias för ett interface

Interface = ett kontrakt 
Där vi defenierar upp hur något ska se ut och hur något ska fungera. Så alla som 
implementerar detta interfacet har samma kriterier.

class = alias för en funktion 

nullable ? = den får vara tom och är valbar

type Person = {
  name: string
  age: number
  nickName?: string 
}
type Student = Person & {
  studentNumber: number
}

interface IPerson {
  name: string
  age: number
  nickName?: string 
}
interface IStudent extends IPerson {
  studentNumber: number
}

En funktion kan deklareras på lite olika sätt; 

Vi kan ha en viss typ av funktion; type addToCart = () => void 
Denna kommer att returnera undefeind eftersom void är ingenting. Detta är som att säga 
utför saken utan att ge mig något tillbaka.

Ett annat alternativ är att säga never; type addToCart = () => never. Denna säger att 
funktionen absolut inte ska skicka något tillbaka. 

Om vi vill att funktionen ska returnera ett värd; type addToCart = () => number. Denna 
säger att funktionen ska returnera en number datatyp.

Det vi kan göra med interface är att skapa mallar för hur saker och ting ska se ut. 

Ex; 
Låt säga att vi vill skapa en mall för hur en produkt ska se ut, då kan vi göra det så 
här;

interface IProduct {
    articleNumber: string,
    name: string,
    description: string, 
    price: number
}

Här har vi skapat en mall för hur en produkt ska se ut. Så den ska alltid ha 
ett arikel nummer osv. 


Web API med fokus på Express JS
Detta är JavaScripts baserat. Vi ska lära oss att bygga egna Web API med fokus på JavaScript. Client Site Rendering 
är saker som renderas i webbläsaren. Här har vi html, css och JavaScript. Detta skapar ju lite prblem eftersom genom 
webbläsaren kan jag gå in och se all kod som finns på sidan. Eftersom vi kan komma åt en databas eller backend lösning 
med en conection string och genom att vi har vår connection string på frontend kan man hitta den på webbläsaren. Så i 
vår client site rendering får det absolut aldrig förekomma kopplingar till databaser. 

Då kan man tänka att eftersom express JS är JavaScript så körs den på client side. Men nej den körs på Server site
Rendering. DVS den körs i bakgrunden. I Server Site Rendering kan vi alltså bygga upp en server. Som ligger och körs 
bakom en skyddad miljö och bara presenterar data. Du kan alltså då inte se själva strukturen bakom den. Detta sker genom 
Request och Response. Så låt säga att vi vill gå in på en hemsida ex domain.com det som händer då när du söker på sidan 
är att du skickar en request till servern för att hämta sidan. När servern har processat Request så skickar den tillbaka 
en Response med ett DOM objekt. Då får du en sida presenterat till dig. Ex;

          HTTP GET Request
} <-------------------------------- {
SERVER                          DATOR
} --------------------------------> {
          HTTP Response (DOM)

Du skickar en Request till servern med hemsidans webbadress som sedan skickar tillbaka en Response med en DOM. Så här 
fungerar det med en server sida alltså ASP.net, PHP osv. Samma sak gäller för web apier. Så när du gör ett web api så 
sker det exakt samma sak. Vi skickar en request som skickar tillbaka ett data objekt istället för ett DOM objekt. Detta 
sker varje gång vi anropar apiet.  

Varför vill vi ha server side?
Det är mindre belasting på användarens datorer. Oftast är den säkrare eftersom vi inte kan komma åt connection string och 
allt sådant i webbläsaren. Dock finns det risk att det är större respons tider, alltså att det tar lång tid för den att 
skicka informationen och ta tillbaka informationen. 

Så när det kommer till Express JS så ligger den som en mellanhand mellan webbläsaren och lagringslösningen. Ex;

USER -------> BROWSER -------> WEBB API -------> STORAGE  

- USER: En användare vill gå in på en sida som listar ut alla produkter.
- BROWSER: Webbläsaren skickar informationen vidare till ett api med hjälp av HTTP Request. 
- WEBB API: Ett Webb API svarar på den önskvärda förfrågan, kontaktar databasen och skickar sedan informationen tillbaka 
            med hjälp av HTTP Response. 
- STORAGE: Lagringslösningen hämtar upp informationen från lagringsplatsen för att sedan skicka det till Webb API. 

Vi har ett par olika HTTP METHODS som vi kan använda. 
- GET Metoden används för att hämta/läsa information. 
- POST Metoden används för att lagra/spara information på ett säkert sätt, alltså skickar informationen. 
- PUT Metoden används för att uppdatera information. 

Vi har några status koder som man måste memorera:

SUCCES:
- 200: OK                             (allt gick som det skulle - skickar oftast tillbaka data)
- 201: CREATED                        (när något skapas - kan skicka tillbaka det skapade objektet)
- 204: NO CONTENT                     (allt gick som det skulle - skickar inte tillbaka data)

CLIENT ERROR (användarens fel):
- 400: BAD REQUEST                    (något fel har uppstått, ex användaren har inte fyllt i formulär rätt)
- 401: UNAUTHORIZED                   (användaren måste vara inloggad för att komma åt resursen)
- 403: FORBIDDEN                      (användaren är inloggad men har inte rätt behörighet)
- 404: NOT FOUND                      (objektet hittades inte, sidan, produkt etc...)
- 405: METHOD NOT ALLOWED             (försöker använda en http metod som inte får användas (POST, GET, PUT, DELETE))
- 409: CONFLICT                       (finns redan en användare med samma ex; e-post)

SERVER ERROR (systemets fel):
- 500: INTERNAL SERVER ERROR          (generiskt felmeddelande som handlar om att kommunikationen inte kan upprättas)
- 501: NOT IMPLEMENTED                (försäker komma åt något som inte finns)
- 503: SERVICE UNAVAILIBLE            (systemet underhålls etc...)

Controllers är routes, bara olika namn. 
Den simulerade databasen som vi använder är inte rätt sätt att göra saker på, utan vi använder den bara nu när vi 
inte har gått igenom databser. 

I vår controller så specefierar vi upp olika routes delar som vi sedan kan använda genom att vi exporterar hela 
controllern. Genom: 

const controller = express.Router()
module.exports = controller

Vi ska sen importera controllern till vår server fil. Genom:

const controller = require('./sökvägen/till/controllern')

Vi säger sen app.use('/api/nånting', controller)

Så när vi går in på denna adress så ska vi controllern köras, och controllern ska ha olika endpoints som den svarar på. 
Så låt säga att vi enkelt skulle vilja hämta alla produkter, då skulle vi kunna skriva i vår controller fil: 

controller.route('/').get((req, res) => {

})

Här specefierar vi att vi ska använda route '/' vilket blir alla produkter och sedan använder vi oss utav en get metod 
med req (hämta) res (svara). Innuti måsvingarna så specifierar vi vad denna route ska göra. För att skicka iväg alla 
produkter så skriver vi res.status(200).json(products). Så när status koden är 200 vilket är ok så svarar vi med alla 
produkter.  

När det kommer till backend delar så ser vi inte resultatet av den kod vi skriver. Vilket vi gör när vi skriver frontend 
delarna. När vi ska använda oss utav en databaslösning och i detta fall MongoDB. Så måste vi installera lite olika saker 
till vår backend. 

npm install mongoose, dotenv, bcryptjs, jsonwebtoken

när vi gjort detta så ska vi skapa en .env fil vilket är en enviroment fil som vi ska lägga in lite saker i. .env filen 
kommer att innehålla vårt portnummer 5000. MONGODB_URI = (nånting) och JWT_SECRET. Dessa är tillför att spara information 
som kan vara känslig ex API nycklar. URI:n beskriver värdarna som ska användas och alternativen som finns. 

.env filen är också till för att spara enviroment varibler på en plats så att vi slipper sprida ut dem över hela 
projektet. 

mongoose är en provider för att kunna koppla sig till MongoDB servern. 

användarnamn MongoDB: win22

För att göra uppdatera, ta bort och skapa produkter säker så ska vi göra så att en användare ska vara inloggad för 
att kunna göra dessa saker. Detta gör vi med bcryptjs och jsonwebtoken. bcryptjs krypterar ex ett lösenord så att de 
inte skrivs i klartext och jsonwebtoken är en token som vi får tillbaka efter vi loggat in. 

Att salta ett lösenord menas med att ett slumptal hashas tillsammans med lösenordet. Saltet är inte hemligt och kan 
lagras med i klartext med ex användarnamnet. Det är viktigt att saltet är slumpmässigt, tillräckligt långt samt 
unikt per användare. Hashas menas med att istället för att lagra ett lösenord i klartext så kallar man att lösenordet 
hashas. Hashning gör att lösenordet blir krypterat med en kontrollsumma som räknas ut av en matematisk funktion. 
När användaren skapas så hashas dens lösenord med den matematiska funktionen och sedan när användaren loggar in så 
genereras en ny hashning med samma funktion som jämförs med den första hashningen. 